/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Song } from "./Song";
import { SongCountArgs } from "./SongCountArgs";
import { SongFindManyArgs } from "./SongFindManyArgs";
import { SongFindUniqueArgs } from "./SongFindUniqueArgs";
import { CreateSongArgs } from "./CreateSongArgs";
import { UpdateSongArgs } from "./UpdateSongArgs";
import { DeleteSongArgs } from "./DeleteSongArgs";
import { Album } from "../../album/base/Album";
import { SongService } from "../song.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Song)
export class SongResolverBase {
  constructor(
    protected readonly service: SongService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "read",
    possession: "any",
  })
  async _songsMeta(
    @graphql.Args() args: SongCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Song])
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "read",
    possession: "any",
  })
  async songs(@graphql.Args() args: SongFindManyArgs): Promise<Song[]> {
    return this.service.songs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Song, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "read",
    possession: "own",
  })
  async song(@graphql.Args() args: SongFindUniqueArgs): Promise<Song | null> {
    const result = await this.service.song(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Song)
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "create",
    possession: "any",
  })
  async createSong(@graphql.Args() args: CreateSongArgs): Promise<Song> {
    return await this.service.createSong({
      ...args,
      data: {
        ...args.data,

        album: args.data.album
          ? {
              connect: args.data.album,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Song)
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "update",
    possession: "any",
  })
  async updateSong(@graphql.Args() args: UpdateSongArgs): Promise<Song | null> {
    try {
      return await this.service.updateSong({
        ...args,
        data: {
          ...args.data,

          album: args.data.album
            ? {
                connect: args.data.album,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Song)
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "delete",
    possession: "any",
  })
  async deleteSong(@graphql.Args() args: DeleteSongArgs): Promise<Song | null> {
    try {
      return await this.service.deleteSong(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Album, {
    nullable: true,
    name: "album",
  })
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "read",
    possession: "any",
  })
  async getAlbum(@graphql.Parent() parent: Song): Promise<Album | null> {
    const result = await this.service.getAlbum(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
