/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Song as PrismaSong,
  Album as PrismaAlbum,
} from "@prisma/client";

export class SongServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SongCountArgs, "select">): Promise<number> {
    return this.prisma.song.count(args);
  }

  async songs(args: Prisma.SongFindManyArgs): Promise<PrismaSong[]> {
    return this.prisma.song.findMany(args);
  }
  async song(args: Prisma.SongFindUniqueArgs): Promise<PrismaSong | null> {
    return this.prisma.song.findUnique(args);
  }
  async createSong(args: Prisma.SongCreateArgs): Promise<PrismaSong> {
    return this.prisma.song.create(args);
  }
  async updateSong(args: Prisma.SongUpdateArgs): Promise<PrismaSong> {
    return this.prisma.song.update(args);
  }
  async deleteSong(args: Prisma.SongDeleteArgs): Promise<PrismaSong> {
    return this.prisma.song.delete(args);
  }

  async getAlbum(parentId: string): Promise<PrismaAlbum | null> {
    return this.prisma.song
      .findUnique({
        where: { id: parentId },
      })
      .album();
  }
}
