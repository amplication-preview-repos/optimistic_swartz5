syntax = "proto3";

                 package user;
service UserService {
 rpc createUser (UserCreateInput) returns (User) {}
rpc users (findManyParams) returns (stream User) {}
rpc user (UserWhereUniqueInput) returns (User) {}
rpc updateUser (UserUpdateInput) returns (User) {}
rpc deleteUser (UserWhereUniqueInput) returns (User) {}
rpc findManyUser (UserWhereUniqueInput) returns (stream Playlist) {}
rpc updateUser (PlaylistParams) returns (stream Playlist) {}
rpc connectUser (PlaylistParams) returns (Playlist) {}
rpc disconnectUser (PlaylistParams) returns (Playlist) {} 
 }
message UserCreateInput {
string id = 1;
string createdAt = 2;
string updatedAt = 3;
string firstName = 4;
string lastName = 5;
string username = 6;
string email = 7;
string password = 8;
repeated string roles = 9;
repeated Playlist playlists = 10;
};
message User {
string id = 1;
string createdAt = 2;
string updatedAt = 3;
string firstName = 4;
string lastName = 5;
string username = 6;
string email = 7;
string password = 8;
repeated string roles = 9;
repeated Playlist playlists = 10;
};
message UserWhereUniqueInput {
string id = 1;
string createdAt = 2;
string updatedAt = 3;
string firstName = 4;
string lastName = 5;
string username = 6;
string email = 7;
string password = 8;
repeated string roles = 9;
repeated Playlist playlists = 10;
};
message UserUpdateInput {
string id = 1;
string createdAt = 2;
string updatedAt = 3;
string firstName = 4;
string lastName = 5;
string username = 6;
string email = 7;
string password = 8;
repeated string roles = 9;
repeated Playlist playlists = 10;
};
message findManyParams {

};
message Playlist {
string id = 1;
string createdAt = 2;
string updatedAt = 3;
string name = 4;
string description = 5;
};
message PlaylistWhereUniqueInput {
string id = 1;
string createdAt = 2;
string updatedAt = 3;
string name = 4;
string description = 5;
};
message PlaylistParams {
UserWhereUniqueInput userWhereUniqueInput = 1;
PlaylistWhereUniqueInput playlistWhereUniqueInput = 2;
};